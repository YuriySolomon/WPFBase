Управлене потоками. Остановка потоков
Для задач. которые долго вызываются. может понадобится отмена
их аботы до естественного окончания.
!!! разрушить основной поток (закрыть окно) не решит эту задачу. т.к.
	потоки равноправные и второй поток продолжит работу после окончания первого

Более того, второму потоку может понадобится "убрать за собой" - освободить
ресурсы, удалит временные файлы и т.п.

Ранее (до 3 версии Core) потоки можно было останавливать методом .Abort()
С версии 5 это упразднено. синтаксической ошибки нет, но при вызове .Abort()
выбрасывается исключение (PlatformNotSupported).
Однако, традиции использования этого метода сохраняются:
вызов .Abort() приводил к тому, что в метоже потока выбрасывалось исключение
(ThreadAborted), которое "разрушало" поток.
При необходимости завершающих действий все тело потокаого метода заключалось
в try-catch, при появлении исключения  отрабатывал catch.

Недостатки:
 - неожиданное появление исключение может нарушить "транзакцию" в работе
 - возможность вызвать .Abort() из любого метода - уххудшает безопасность

Новый подход:
 Разделяются инструменты управления остановой и признака остановки
 CancellationTokenSource kokenSource; - источник токенов, генерирует
  токены, каждый из которых "привязан" к этому источнику. Отмена
  источника переводит все его токены в отмененное состояние.
CancellationToken token = tokenSource.Token; - сгенерированный токен,
 он передается в потоки/задачи и может быть использован для информирования
 !! отмена источника не влияет на ротоки, только устанавливает отмену токенов.
	Потоки должны сами мониторить состояние токенов
	if (token.IsCancellationRequested) { ... Действие по отмене ... }
Источник "одноразовый". после отмены его не нужно пытаться "открыть",
 следует создават новый источник.