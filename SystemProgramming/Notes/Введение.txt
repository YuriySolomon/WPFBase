/*      Системное программирование. Введение. Многопоточность.
 * Развитие вычислительной техники достигло пределов физического плана
 * и последние время развивается путем увеличения кол-ва процессоров
 * в место ускорения одного процессорного модуля.
 * Программирование также смещается от написания одно-ниточных програм
 * к многониточным - с наличием методов, которые выполняются разными
 * исполнителями в разых окружениях и. возможно. абсолютно одновременно.
 * Потоки (Threads) (не путать, как "поток" переводиться еще и stream,
 * но это поток данных) - это  системные ресурсы. позволяющие обеспечить 
 * работу кода отдельно от других потоков.
 * 
 * Зачем?
 * - Разгрузка интерфейсаЖ если в обработчике события будет долгий код.
 *      то интерфейс не будет реагировать на другие события. пока не
 *      закончится данное.
 *   = В некоторых системах даже существует запрет на использование
 *   в обработчиках некоторых инструментов. например, запросов к БД,
 *   обращение к сетевым ресурсам и т.п.
 *   = НО! в большинстве случаев элементы интерфейса не разрешают
 *   менять свое состояние из других потоков. Поэтому работа в 
 *   многопоточном режиме "инг-понг" один поток стартует второй
 *   поток. второй поток делегирует первому потоку задачи вывода
 *   
 *   Main thread (Window)               New Theard (TheardMethod)
 *   ctor
 *   Loader
 *   Click ----------------------------> ctor
 *   
 *   AddMessage <---------------------- Invoke (addMessage)
 *                                      Sleep() Реаьно - 
 *    Message_Click                     Sleep() здесь
 *    Messages.Text +=                  Sleep() происходить
 *      "Сообщение\n";                  Sleep() какая-то долгая
 *                                      Sleep() работа
 *    AddMessage <--------------------- Invoke(AddMessage)
 *                                          |
 *    Message_Click                         X (return - конец потока)
 *    Messages.Text +=
 *     "Сообщение\n";
 * 
 * Поток создается "на методе", поток стартует и начинает выполнять метод,
 * после окончания метода поток разрушается.
 * Есть ограничения для метоод, которые предназначены для потоков:
 * void Method()
 * void Method(object params)
 */